package com.elaon.controller;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.elaon.dao.LoanAcceptanceRepository;
import com.elaon.dao.LoanRepository;
import com.elaon.entity.Loan;
import com.elaon.entity.LoanAcceptance;
import com.elaon.model.DeleteUser;
import com.elaon.model.Payment;
import com.elaon.model.SmsRequest;
import com.elaon.service.LoanPaymentServiceImpl;
import com.elaon.service.MailMessageSender;
import com.elaon.service.Service;

@Controller
@RequestMapping("/pay")
public class PaymentController {

	private final Service smsService;

	@Autowired
	public PaymentController(Service SmsService) {
		super();
		this.smsService = SmsService;
	}

	@Autowired
	LoanPaymentServiceImpl loanPayment;

	@Autowired
	LoanAcceptanceRepository lar;

	@Autowired
	LoanRepository lr;

	@Autowired
	MailMessageSender mailSender;

	@GetMapping("/loanPaymentPage")
	public String paymentForm(@ModelAttribute("payment") Payment payment, Model model) {
		DateFormat dfor = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date obj = new Date();
		System.out.println(dfor.format(obj));

		model.addAttribute("date", dfor.format(obj));
		return "payment-form";
	}

	@PostMapping("/payLoan")
	public String loanPayment(@Valid @ModelAttribute("payment") Payment payment, BindingResult result, Model model,
			HttpSession session) {

		if (result.hasErrors()) {
			DateFormat dfor = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
			Date obj = new Date();
			System.out.println(dfor.format(obj));

			model.addAttribute("date", dfor.format(obj));
			return "payment-form";
		}

		Long lNo = payment.getLoanNumber();
		double amountPaid = payment.getAmountPaid();
		String paymentDate = payment.getDateOfPayment();
		
		boolean exists = loanExist(lNo);
		
		if(exists) {

			loanPayment.addPayment(payment);

			LoanAcceptance accept = lar.findById(payment.getLoanNumber()).get();
			Long applicationId = accept.getLoanId();

			Loan loan = lr.findById(applicationId).get();

			String number = "+91" + loan.getBorrower().getBorrowerContactNo();
			String message = "Monthly Loan EMI paid with loan number - " + lNo + " amount - " + amountPaid
					+ " date of payment - " + paymentDate;
			String email = loan.getBorrower().getBorrowerEmail();
			String subject = "Monthly EMI paid";

			SmsRequest smsRequest = new SmsRequest(number, message, email);

			smsService.sendSms(smsRequest);
			mailSender.sendMail(smsRequest, subject);

			return "home";
		}
		else {
			model.addAttribute("deleteEloanUser", new DeleteUser());

			model.addAttribute("deleteError", "Username doesnot exist.");

			logger.info("Username cannot be empty.");

			return "";
		}

	}

	private boolean loanExist(Long loanNumber) {

		// check the database if the user already exists
		boolean exists = loanPayment.loanNumberExist(loanNumber);


		return exists;
	}
}
